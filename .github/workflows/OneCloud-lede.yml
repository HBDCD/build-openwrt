name: 玩客云-LEDE
run-name: ${{ inputs.device }}

on:
  workflow_dispatch:
    inputs:
      device:
        description: '请输入设备型号'
        required: true
        default: 'thunder-onecloud'

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Space cleanup and Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
        sudo -E apt-mark hold grub-efi-amd64-signed
        sudo -E apt update
        sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
        sudo -E apt -y full-upgrade
        sudo -E apt -y install ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E systemctl daemon-reload
        sudo -E apt -y autoremove --purge
        sudo -E apt clean
        sudo -E timedatectl set-timezone "Asia/Shanghai"

    - name: Clone source code
      run: |
        git clone https://github.com/coolsnowwolf/lede openwrt
        cd openwrt
        git checkout bac0af3dec67781112f47203fedb02dc035fe942

    - name: Update feeds
      run: |
        cp -r files openwrt
        chmod 755 -R openwrt/files
        cat feeds.buildinfo >>openwrt/feeds.conf.default
        cd openwrt
        ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a && ./scripts/feeds update -a && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        target_device=$(grep -m 1 "^config TARGET_.*$(echo ${{ inputs.device }} | xargs)" openwrt/tmp/.config-target.in)
        if [ -z "$target_device" ]; then
          echo "Error: The ${{ inputs.device }} device you input does not exist!"
          exit 1
        fi
        DEVICE_NAME=$(echo $target_device | awk -F "DEVICE_" '{print $2}')
        cat <<EOF >openwrt/.config
        CONFIG_TARGET_$(echo $target_device | awk -F "_" '{print $2}')=y
        CONFIG_TARGET_$(echo $target_device | awk -F "_" '{print $2}')_$(echo $target_device | awk -F "_" '{print $3}')=y
        CONFIG_TARGET_$(echo $target_device | awk -F "_" '{print $2}')_$(echo $target_device | awk -F "_" '{print $3}')_DEVICE_${DEVICE_NAME}=y
        EOF
        cat lede.config >>openwrt/.config && cat openwrt/.config
        echo "DEVICE_NAME=${DEVICE_NAME}" >> $GITHUB_ENV

    - name: Compile ${{ env.DEVICE_NAME }} firmware
      run: cd openwrt && make -j$(nproc) defconfig download clean world

    - name: Generate direct burn
      run: |
          sudo apt install img2simg
          ver="v0.3.1"
          curl -L -o ./AmlImg https://github.com/lxiaya/AmlImg/releases/download/$ver/AmlImg_${ver}_linux_amd64
          chmod +x ./AmlImg
          curl -L -o ./uboot.img https://github.com/lxiaya/u-boot-onecloud/releases/download/build-20230901-0443/eMMC.burn.img
          ./AmlImg unpack ./uboot.img burn/
          echo "::endgroup::"
          gunzip openwrt/bin/targets/*/*/*.gz
          diskimg=$(ls openwrt/bin/targets/*/*/*.img)
          loop=$(sudo losetup --find --show --partscan $diskimg)
          img_ext="openwrt.img"
          img_mnt="xd"
          rootfs_mnt="img"
          boot_img=$1${img_ext}
          boot_img_mnt=$1${img_mnt}
          rootfs_img_mnt=$1${rootfs_mnt}
          echo ${boot_img}
          echo ${boot_img_mnt}
          echo ${rootfs_img_mnt}
          sudo rm -rf ${boot_img}
          sudo rm -rf ${boot_img_mnt}
          sudo rm -rf ${rootfs_img_mnt}
          sudo dd if=/dev/zero of=${boot_img} bs=1M count=400
          sudo mkfs.ext4 ${boot_img}
          sudo mkdir ${boot_img_mnt}
          sudo mkdir ${rootfs_img_mnt}
          sudo mount ${boot_img} ${boot_img_mnt}
          sudo mount ${loop}p2 ${rootfs_img_mnt}
          cd ${rootfs_img_mnt}
          sudo cp -r * ../${boot_img_mnt}
          cd ..
          sudo sync
          sudo umount ${boot_img_mnt}
          sudo umount ${rootfs_img_mnt}
          sudo img2simg ${loop}p1 burn/boot.simg
          sudo img2simg openwrt.img burn/rootfs.simg
          sudo rm -rf *.img
          sudo losetup -d $loop
          cat <<EOF >>burn/commands.txt
          PARTITION:boot:sparse:boot.simg
          PARTITION:rootfs:sparse:rootfs.simg
          EOF
          prefix=$(ls openwrt/bin/targets/*/*/*.img | sed 's/\.img$//')
          burnimg=${prefix}.burn.img
          ./AmlImg pack $burnimg burn/
          for f in openwrt/bin/targets/*/*/*.burn.img; do
            sha256sum "$f" >"${f}.sha"
            xz -9 --threads=0 --compress "$f"
          done
          sudo rm -rf openwrt/bin/targets/*/*/*.img
          sudo rm -rf openwrt/bin/targets/*/*/*.gz


    - name: 整理固件
      id: organize
      run: |
        cd openwrt
        mkdir outfile
        cp -rf bin/targets/*/*/*.xz ./outfile
        cp -rf .config ./outfile/config.txt
        rm -rf bin/targets/*/*/packages
        
        cd outfile
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV

    - name: Upload firmware to workflow directory
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.DEVICE_NAME }}-firmware
        path: ${{ env.FIRMWARE }}
