name: 玩客云OpenWrt
run-name: ${{ inputs.device }}

on:
  workflow_dispatch:
    inputs:
      device:
        description: '请输入设备型号'
        required: true
        default: 'thunder-onecloud'

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: false
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true

    - name: Initialization environment
      run: |
        sudo apt update
        sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gettext gcc-multilib g++-multilib \
        git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev \
        libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libncurses-dev libpython3-dev libreadline-dev \
        libssl-dev libtool llvm lrzsz genisoimage msmtp ninja-build p7zip p7zip-full patch pkgconf python3 \
        python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo \
        uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev

    - name: Clone source code
      run: |
        git clone -b openwrt-24.10 https://github.com/openwrt/openwrt && cp -r files openwrt && chmod 755 -R openwrt/files && cat feeds.buildinfo >>openwrt/feeds.conf.default
        cat openwrt/feeds.conf.default

    - name: Load onecloud
      run: |
        mv target/linux/amlogic openwrt/target/linux
        chmod -Rf 755 openwrt/target/linux/amlogic

    - name: Update feeds
      run: |
        cd openwrt
        git clone https://github.com/vernesong/OpenClash package/openclash
        ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        target_device=$(grep -m 1 "^config TARGET_.*$(echo ${{ inputs.device }} | xargs)" openwrt/tmp/.config-target.in)
        if [ -z "$target_device" ]; then
          echo "Error: The ${{ inputs.device }} device you input does not exist!"
          exit 1
        fi
        DEVICE_NAME=$(echo $target_device | awk -F "DEVICE_" '{print $2}')
        cat <<EOF >openwrt/.config
        CONFIG_TARGET_$(echo $target_device | awk -F "_" '{print $2}')=y
        CONFIG_TARGET_$(echo $target_device | awk -F "_" '{print $2}')_$(echo $target_device | awk -F "_" '{print $3}')=y
        CONFIG_TARGET_$(echo $target_device | awk -F "_" '{print $2}')_$(echo $target_device | awk -F "_" '{print $3}')_DEVICE_${DEVICE_NAME}=y
        CONFIG_LUCI_LANG_zh_Hans=y
        EOF
        cat config.buildinfo >>openwrt/.config && cat openwrt/.config
        echo "DEVICE_NAME=${DEVICE_NAME}" >> $GITHUB_ENV

    - name: Generate configuration file
      run: cd openwrt && make defconfig

    - name: Download packages
      run: cd openwrt && make download -j16

    - name: Compile firmware
      run: |
        cd openwrt
        make -j$(nproc) || make -j1 V=s
        echo "======================="
        echo "Space usage:"
        echo "======================="
        df -h
        echo "======================="
        du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
        du -h --max-depth=1 ./build_dir
        du -h --max-depth=1 ./bin

    - name: 制作直刷包
      run: |
        chmod +x gen_burn_img.sh
        chmod +x AmlImg
        $GITHUB_WORKSPACE/gen_burn_img.sh

    - name: 整理固件
      id: organize
      run: |
        cd openwrt
        mkdir outfile
        cp -rf bin/targets/*/*/*.xz ./outfile
        cp -rf .config ./outfile/config.txt
        rm -rf bin/targets/*/*/packages
        
        cd outfile
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV

    - name: Upload firmware to workflow directory
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.DEVICE_NAME }}-firmware
        path: ${{ env.FIRMWARE }}
